<?php

namespace PackageFactory\AtomicFusion\PropTypes\Error\ExceptionHandler;

use Neos\Flow\Annotations as Flow;
use Neos\Flow\Log\SystemLoggerInterface;
use Neos\Fusion\Core\ExceptionHandlers\BubblingHandler;
use PackageFactory\AtomicFusion\PropTypes\Error\Exception\PropTypeException;

class PropTypeExceptionHandler extends BubblingHandler
{

    /**
     * @var SystemLoggerInterface
     * @Flow\Inject
     */
    protected $systemLogger;

    /**
     * @param array $fusionPath
     * @param \Exception $exception
     * @return string
     * @throws \Neos\Flow\Configuration\Exception\InvalidConfigurationException
     * @throws \Neos\Flow\Mvc\Exception\StopActionException
     */
    public function handleRenderingException($fusionPath, \Exception $exception)
    {
        if ($exception instanceof PropTypeException) {
            return $this->handlePropTypeException($fusionPath, $exception, $exception->getReferenceCode());
        } else {
            parent::handleRenderingException($fusionPath, $exception); // TODO: Change the autogenerated stub
        }
    }

    /**
     * Renders the exception in HTML for display
     *
     * @param string $fusionPath path causing the exception
     * @param \Exception $exception exception to handle
     * @param integer $referenceCode
     * @return string
     */
    protected function handlePropTypeException($fusionPath, PropTypeException $exception, $referenceCode)
    {
        $messageBody = sprintf('<p class="neos-message-content">FOOOO %s</p>', htmlspecialchars($exception->getMessage()));

        if ($referenceCode) {
            $messageBody .= sprintf('<p class="neos-reference-code">%s</p>', $this->formatErrorCodeMessage($referenceCode));
        }

        $message = sprintf(
            '<div class="neos-message-header"><div class="neos-message-icon"><i class="icon-warning-sign"></i></div><h1>An exception was thrown while Neos tried to render your page</h1></div>' .
            '<div class="neos-message-wrapper">%s</div>',
            $messageBody
        );

        $this->systemLogger->logException($exception);
        return $message;
    }

    /**
     * Renders a message depicting the user where to find further information
     * for the given reference code.
     *
     * @param integer $referenceCode
     * @return string A rendered message with the reference code containing HTML
     */
    protected function formatErrorCodeMessage($referenceCode)
    {
        return ($referenceCode ? 'For a full stacktrace, open <code>Data/Logs/Exceptions/' . $referenceCode . '.txt</code>' : '');
    }

}
